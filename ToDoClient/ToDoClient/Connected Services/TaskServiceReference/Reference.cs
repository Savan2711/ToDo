//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToDoClient.TaskServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ToDo")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                if ((object.ReferenceEquals(this.userNameField, value) != true)) {
                    this.userNameField = value;
                    this.RaisePropertyChanged("userName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/ToDo")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isCompleted {
            get {
                return this.isCompletedField;
            }
            set {
                if ((this.isCompletedField.Equals(value) != true)) {
                    this.isCompletedField = value;
                    this.RaisePropertyChanged("isCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TaskServiceReference.ITaskService")]
    public interface ITaskService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTask", ReplyAction="http://tempuri.org/ITaskService/AddTaskResponse")]
        bool AddTask(ToDoClient.TaskServiceReference.User user, ToDoClient.TaskServiceReference.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/AddTask", ReplyAction="http://tempuri.org/ITaskService/AddTaskResponse")]
        System.Threading.Tasks.Task<bool> AddTaskAsync(ToDoClient.TaskServiceReference.User user, ToDoClient.TaskServiceReference.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/MarkTaskCompleted", ReplyAction="http://tempuri.org/ITaskService/MarkTaskCompletedResponse")]
        bool MarkTaskCompleted(ToDoClient.TaskServiceReference.User user, string taskTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/MarkTaskCompleted", ReplyAction="http://tempuri.org/ITaskService/MarkTaskCompletedResponse")]
        System.Threading.Tasks.Task<bool> MarkTaskCompletedAsync(ToDoClient.TaskServiceReference.User user, string taskTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        bool UpdateTask(ToDoClient.TaskServiceReference.User user, string taskTitle, ToDoClient.TaskServiceReference.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/UpdateTask", ReplyAction="http://tempuri.org/ITaskService/UpdateTaskResponse")]
        System.Threading.Tasks.Task<bool> UpdateTaskAsync(ToDoClient.TaskServiceReference.User user, string taskTitle, ToDoClient.TaskServiceReference.Task task);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        bool DeleteTask(ToDoClient.TaskServiceReference.User user, string taskTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/DeleteTask", ReplyAction="http://tempuri.org/ITaskService/DeleteTaskResponse")]
        System.Threading.Tasks.Task<bool> DeleteTaskAsync(ToDoClient.TaskServiceReference.User user, string taskTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAllTasks", ReplyAction="http://tempuri.org/ITaskService/GetAllTasksResponse")]
        ToDoClient.TaskServiceReference.Task[] GetAllTasks(ToDoClient.TaskServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/GetAllTasks", ReplyAction="http://tempuri.org/ITaskService/GetAllTasksResponse")]
        System.Threading.Tasks.Task<ToDoClient.TaskServiceReference.Task[]> GetAllTasksAsync(ToDoClient.TaskServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/SearchTaskByTitle", ReplyAction="http://tempuri.org/ITaskService/SearchTaskByTitleResponse")]
        string SearchTaskByTitle(ToDoClient.TaskServiceReference.User user, string taskTitle);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITaskService/SearchTaskByTitle", ReplyAction="http://tempuri.org/ITaskService/SearchTaskByTitleResponse")]
        System.Threading.Tasks.Task<string> SearchTaskByTitleAsync(ToDoClient.TaskServiceReference.User user, string taskTitle);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITaskServiceChannel : ToDoClient.TaskServiceReference.ITaskService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TaskServiceClient : System.ServiceModel.ClientBase<ToDoClient.TaskServiceReference.ITaskService>, ToDoClient.TaskServiceReference.ITaskService {
        
        public TaskServiceClient() {
        }
        
        public TaskServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TaskServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddTask(ToDoClient.TaskServiceReference.User user, ToDoClient.TaskServiceReference.Task task) {
            return base.Channel.AddTask(user, task);
        }
        
        public System.Threading.Tasks.Task<bool> AddTaskAsync(ToDoClient.TaskServiceReference.User user, ToDoClient.TaskServiceReference.Task task) {
            return base.Channel.AddTaskAsync(user, task);
        }
        
        public bool MarkTaskCompleted(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.MarkTaskCompleted(user, taskTitle);
        }
        
        public System.Threading.Tasks.Task<bool> MarkTaskCompletedAsync(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.MarkTaskCompletedAsync(user, taskTitle);
        }
        
        public bool UpdateTask(ToDoClient.TaskServiceReference.User user, string taskTitle, ToDoClient.TaskServiceReference.Task task) {
            return base.Channel.UpdateTask(user, taskTitle, task);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTaskAsync(ToDoClient.TaskServiceReference.User user, string taskTitle, ToDoClient.TaskServiceReference.Task task) {
            return base.Channel.UpdateTaskAsync(user, taskTitle, task);
        }
        
        public bool DeleteTask(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.DeleteTask(user, taskTitle);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTaskAsync(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.DeleteTaskAsync(user, taskTitle);
        }
        
        public ToDoClient.TaskServiceReference.Task[] GetAllTasks(ToDoClient.TaskServiceReference.User user) {
            return base.Channel.GetAllTasks(user);
        }
        
        public System.Threading.Tasks.Task<ToDoClient.TaskServiceReference.Task[]> GetAllTasksAsync(ToDoClient.TaskServiceReference.User user) {
            return base.Channel.GetAllTasksAsync(user);
        }
        
        public string SearchTaskByTitle(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.SearchTaskByTitle(user, taskTitle);
        }
        
        public System.Threading.Tasks.Task<string> SearchTaskByTitleAsync(ToDoClient.TaskServiceReference.User user, string taskTitle) {
            return base.Channel.SearchTaskByTitleAsync(user, taskTitle);
        }
    }
}
